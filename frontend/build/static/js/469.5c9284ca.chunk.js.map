{"version":3,"file":"static/js/469.5c9284ca.chunk.js","mappings":"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","sources":["CatalogPanel.js"],"sourcesContent":["import api from \"./api\";\r\nimport React, { useEffect, useState, useCallback, useMemo, useRef } from \"react\";\r\nimport { createPortal } from \"react-dom\";\r\nimport { FiRefreshCw } from \"react-icons/fi\";\r\nimport { loadCatalogSets, saveCatalogSets, loadCatalogSetProducts, saveCatalogSetProducts } from \"./chatStorage\";\r\n\r\nconst API_BASE = process.env.REACT_APP_API_BASE || \"\";\r\n\r\nexport default function CatalogPanel({\r\n  activeUser,\r\n  websocket,\r\n  onMessageSent,\r\n}) {\r\n  // Sets and selection\r\n  const [sets, setSets] = useState([]);\r\n  const [loadingSets, setLoadingSets] = useState(false);\r\n  const [selectedSet, setSelectedSet] = useState(null);\r\n\r\n  // Products and pagination\r\n  const PAGE_SIZE = 24;\r\n  const [products, setProducts] = useState([]);\r\n  const [loadingProducts, setLoadingProducts] = useState(false);\r\n  const [hasMore, setHasMore] = useState(true);\r\n  const [fetchLimit, setFetchLimit] = useState(PAGE_SIZE);\r\n  const gridRef = useRef(null);\r\n  const abortRef = useRef(null);\r\n  const requestIdRef = useRef(0);\r\n\r\n  // Selected images (URLs)\r\n  const [selectedImages, setSelectedImages] = useState([]);\r\n\r\n  // Pending ops indicator (for optimistic sends)\r\n  const [pendingOperations, setPendingOperations] = useState(new Set());\r\n\r\n  // Modal state (grid popup)\r\n  const [modalOpen, setModalOpen] = useState(false);\r\n  const [modalTitle, setModalTitle] = useState(\"\");\r\n  const [modalMode, setModalMode] = useState('products'); // 'folders' | 'products'\r\n  const [folderSets, setFolderSets] = useState([]); // sets shown as folders in folder view\r\n  const [activeFilter, setActiveFilter] = useState(null); // 'girls' | 'boys' | 'all'\r\n\r\n  // All selections send as images (product toggle removed per requirements)\r\n\r\n  // Temporary status for sending an entire set\r\n  const [sendingSet, setSendingSet] = useState(false);\r\n  const autoLoadAttemptsRef = useRef(0);\r\n\r\n  // Fetch sets list with SWR (cache first, then refresh)\r\n  const fetchSets = async () => {\r\n    setLoadingSets(true);\r\n    try {\r\n      const cached = await loadCatalogSets();\r\n      if (cached?.length) {\r\n        setSets(cached);\r\n        if (!selectedSet) setSelectedSet(cached[0].id);\r\n      }\r\n    } catch {}\r\n    try {\r\n      const res = await api.get(`${API_BASE}/catalog-sets`);\r\n      const list = Array.isArray(res.data) ? res.data : [];\r\n      setSets(list);\r\n      await saveCatalogSets(list);\r\n      if (!selectedSet && list.length > 0) {\r\n        setSelectedSet(list[0].id);\r\n      }\r\n      // Prefetch top sets into IndexedDB to speed up modal open\r\n      try {\r\n        const top = list.slice(0, 4);\r\n        const concurrency = 2;\r\n        let i = 0;\r\n        const runNext = async () => {\r\n          if (i >= top.length) return;\r\n          const s = top[i++];\r\n          if (!s?.id) return runNext();\r\n          const cachedSet = await loadCatalogSetProducts(s.id);\r\n          if (!cachedSet || cachedSet.length === 0) {\r\n            try {\r\n              const resp = await api.get(`${API_BASE}/catalog-set-products`, { params: { set_id: s.id, limit: PAGE_SIZE } });\r\n              const arr = Array.isArray(resp.data) ? resp.data : [];\r\n              if (arr.length) await saveCatalogSetProducts(s.id, arr);\r\n            } catch {}\r\n          }\r\n          return runNext();\r\n        };\r\n        await Promise.all(Array.from({ length: concurrency }, () => runNext()));\r\n      } catch {}\r\n    } catch (err) {\r\n      console.error(\"Error fetching sets:\", err);\r\n      if (!Array.isArray(sets) || sets.length === 0) setSets([]);\r\n    }\r\n    setLoadingSets(false);\r\n  };\r\n\r\n  // Fetch products for current set with increasing limit (simple pagination)\r\n  const fetchProducts = async (setId, limit) => {\r\n    if (!setId) return [];\r\n    if (abortRef.current) abortRef.current.abort();\r\n    const controller = new AbortController();\r\n    abortRef.current = controller;\r\n    setLoadingProducts(true);\r\n    const reqId = ++requestIdRef.current;\r\n    try {\r\n      const res = await api.get(`${API_BASE}/catalog-set-products`, {\r\n        params: { set_id: setId, limit: limit || PAGE_SIZE },\r\n        signal: controller.signal,\r\n      });\r\n      const list = Array.isArray(res.data) ? res.data : [];\r\n      // Only update if this is the latest request and the same set is still selected\r\n      if (reqId === requestIdRef.current && selectedSet === setId) {\r\n        setProducts(list);\r\n        setHasMore(list.length >= (limit || PAGE_SIZE));\r\n      }\r\n      try { await saveCatalogSetProducts(setId, list); } catch {}\r\n      return list;\r\n    } catch (err) {\r\n      if (err?.name !== \"CanceledError\") console.error(\"Error fetching set products:\", err);\r\n      if (reqId === requestIdRef.current && selectedSet === setId) {\r\n        // Preserve existing items; just stop further pagination on error\r\n        setHasMore(false);\r\n      }\r\n      return [];\r\n    } finally {\r\n      if (reqId === requestIdRef.current) {\r\n        setLoadingProducts(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Infinite scroll handler\r\n  useEffect(() => {\r\n    if (!modalOpen || modalMode !== 'products') return;\r\n    const el = gridRef.current;\r\n    if (!el) return;\r\n    const onScroll = () => {\r\n      if (loadingProducts || !hasMore) return;\r\n      const nearBottom = el.scrollTop + el.clientHeight >= el.scrollHeight - 50;\r\n      if (nearBottom) {\r\n        setFetchLimit((l) => l + PAGE_SIZE);\r\n      }\r\n    };\r\n    el.addEventListener('scroll', onScroll);\r\n    return () => el.removeEventListener('scroll', onScroll);\r\n  }, [modalOpen, modalMode, loadingProducts, hasMore]);\r\n\r\n  // Re-fetch more products when fetchLimit increases\r\n  useEffect(() => {\r\n    if (!modalOpen || modalMode !== 'products' || !selectedSet) return;\r\n    fetchProducts(selectedSet, fetchLimit);\r\n  }, [fetchLimit]);\r\n\r\n  // Auto-load more until scroll is available (bounded attempts)\r\n  useEffect(() => {\r\n    if (!modalOpen || modalMode !== 'products') return;\r\n    const el = gridRef.current;\r\n    if (!el) return;\r\n    const canScroll = el.scrollHeight > el.clientHeight + 20;\r\n    if (!canScroll && hasMore && products.length >= fetchLimit && autoLoadAttemptsRef.current < 6) {\r\n      autoLoadAttemptsRef.current += 1;\r\n      setFetchLimit((l) => l + PAGE_SIZE);\r\n    }\r\n  }, [products, hasMore, modalOpen, modalMode, fetchLimit]);\r\n\r\n  const generateTempId = () => `temp_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n\r\n  // Send optimistic message via WebSocket\r\n  const sendOptimisticMessage = useCallback((messageData) => {\r\n    if (!websocket || websocket.readyState !== WebSocket.OPEN) {\r\n      console.error('WebSocket not connected');\r\n      return null;\r\n    }\r\n\r\n    const tempId = generateTempId();\r\n    const optimisticMessage = {\r\n      id: tempId,\r\n      user_id: activeUser.user_id,\r\n      from_me: true,\r\n      status: 'sending',\r\n      timestamp: new Date().toISOString(),\r\n      temp_id: tempId,\r\n      ...messageData\r\n    };\r\n\r\n    // Send via WebSocket for instant UI update\r\n    websocket.send(JSON.stringify({\r\n      type: 'send_message',\r\n      data: optimisticMessage\r\n    }));\r\n\r\n    // Track as pending\r\n    setPendingOperations(prev => new Set([...prev, tempId]));\r\n\r\n    // Notify parent about optimistic message\r\n    if (onMessageSent) {\r\n      onMessageSent(optimisticMessage);\r\n    }\r\n\r\n    return tempId;\r\n  }, [websocket, activeUser?.user_id, onMessageSent]);\r\n\r\n  // Send a single image (direct link) via WebSocket\r\n  const sendImageUrl = (url, caption = \"\") => {\r\n    if (!activeUser?.user_id) return;\r\n    return sendOptimisticMessage({\r\n      type: 'image',\r\n      message: url,\r\n      url,\r\n      caption,\r\n    });\r\n  };\r\n\r\n  // Send interactive catalog product instantly via WebSocket\r\n  const sendInteractiveProduct = async (product) => {\r\n    if (!activeUser?.user_id || !product?.retailer_id) return;\r\n    const caption = product?.name && product?.price ? `${product.name} • ${product.price}` : (product?.name || \"\");\r\n    sendOptimisticMessage({\r\n      type: 'catalog_item',\r\n      message: caption || 'Product',\r\n      product_retailer_id: String(product.retailer_id || product.product_retailer_id || product.id),\r\n      caption,\r\n    });\r\n  };\r\n\r\n  // Send whole set by requesting backend to deliver the selected set\r\n  const sendWholeSet = async () => {\r\n    if (!activeUser?.user_id || !selectedSet) return;\r\n\r\n    // Build a caption that mirrors what the customer will see\r\n    const setInfo = sets.find((s) => s.id === selectedSet);\r\n    const captionDetails = [];\r\n    if (setInfo?.name) captionDetails.push(setInfo.name);\r\n    if (setInfo?.item_count) captionDetails.push(`${setInfo.item_count} items`);\r\n    const baseDetails = captionDetails.join(' • ');\r\n    const captionText = captionDetails.length\r\n      ? `Envoi de l'ensemble complet : ${baseDetails}…\\nإرسال المجموعة كاملة: ${baseDetails}…`\r\n      : `Envoi de l'ensemble complet…\\nإرسال المجموعة كاملة…`;\r\n\r\n    // Optimistic bubble before hitting the API\r\n    const tempId = sendOptimisticMessage({ type: 'text', message: captionText });\r\n\r\n    setSendingSet(true);\r\n    try {\r\n      await api.post(\r\n        `${API_BASE}/send-catalog-set-all`,\r\n        new URLSearchParams({\r\n          user_id: activeUser.user_id,\r\n          set_id: selectedSet,\r\n          caption: captionDetails.join(' • '),\r\n          temp_id: tempId,\r\n        }),\r\n        { headers: { 'Content-Type': 'application/x-www-form-urlencoded' } }\r\n      );\r\n    } catch (err) {\r\n      console.error('Error sending full set:', err);\r\n    } finally {\r\n      setSendingSet(false);\r\n    }\r\n  };\r\n\r\n  // Removed legacy \"Send entire catalog\" action per product requirements\r\n\r\n  // Send selected items strictly as images\r\n  const sendSelectedImages = async () => {\r\n    if (!activeUser?.user_id || selectedImages.length === 0) {\r\n      alert(\"Please select at least one image.\");\r\n      return;\r\n    }\r\n    for (const url of selectedImages) {\r\n      sendImageUrl(url);\r\n      await new Promise(r => setTimeout(r, 40));\r\n    }\r\n  };\r\n\r\n  // Listen for WebSocket message status updates\r\n  useEffect(() => {\r\n    if (!websocket) return;\r\n\r\n    const handleMessage = (event) => {\r\n      try {\r\n        const data = JSON.parse(event.data);\r\n        \r\n        if (data.type === 'message_status_update') {\r\n          const { temp_id, status } = data.data;\r\n          \r\n          if (temp_id && pendingOperations.has(temp_id)) {\r\n            if (status === 'sent' || status === 'failed') {\r\n              // Remove from pending operations\r\n              setPendingOperations(prev => {\r\n                const newSet = new Set(prev);\r\n                newSet.delete(temp_id);\r\n                return newSet;\r\n              });\r\n            }\r\n          }\r\n        }\r\n      } catch (err) {\r\n        console.error('Error parsing WebSocket message:', err);\r\n      }\r\n    };\r\n\r\n    websocket.addEventListener('message', handleMessage);\r\n    \r\n    return () => {\r\n      websocket.removeEventListener('message', handleMessage);\r\n    };\r\n  }, [websocket, pendingOperations]);\r\n\r\n  // Initial load of sets\r\n  useEffect(() => { fetchSets(); }, []);\r\n\r\n  // Minimal refresh catalog control (icon button)\r\n  function RefreshCatalogButton({ onRefresh }) {\r\n    const [loading, setLoading] = useState(false);\r\n    const [ok, setOk] = useState(false);\r\n\r\n    const handleRefresh = async () => {\r\n      setLoading(true);\r\n      setOk(false);\r\n      try {\r\n        const res = await api.post(`${API_BASE}/refresh-catalog-cache`);\r\n        // Optionally re-fetch sets to reflect any changes after refresh\r\n        try { await fetchSets(); } catch {}\r\n        if (onRefresh) onRefresh(res?.data);\r\n        setOk(true);\r\n      } catch (err) {\r\n        console.error('Error refreshing catalog:', err);\r\n      } finally {\r\n        // brief success indicator\r\n        setTimeout(() => setOk(false), 1500);\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    return (\r\n      <button\r\n        onClick={handleRefresh}\r\n        disabled={loading}\r\n        className={`p-1.5 rounded-lg text-gray-300 hover:text-white hover:bg-gray-800 transition-colors ${loading ? 'opacity-70' : ''}`}\r\n        type=\"button\"\r\n        title={loading ? 'Syncing…' : 'Sync catalog'}\r\n        aria-label=\"Sync catalog\"\r\n      >\r\n        <FiRefreshCw className={`${loading ? 'animate-spin' : ''} ${ok ? 'text-green-400' : ''}`} />\r\n      </button>\r\n    );\r\n  }\r\n\r\n  const isWebSocketConnected = websocket && websocket.readyState === WebSocket.OPEN;\r\n\r\n  // Derived helpers\r\n  const selectedCount = selectedImages.length;\r\n  const toggleSelect = (url) => {\r\n    setSelectedImages(prev => prev.includes(url) ? prev.filter(u => u !== url) : [...prev, url]);\r\n  };\r\n  const selectAllVisible = () => {\r\n    const urls = products.map(p => p.images?.[0]?.url).filter(Boolean);\r\n    setSelectedImages(urls);\r\n  };\r\n  const clearSelection = () => setSelectedImages([]);\r\n\r\n  const openSetModal = async (setObj) => {\r\n    setSelectedSet(setObj.id);\r\n    setModalTitle(setObj.name || setObj.id);\r\n    setModalMode('products');\r\n    setFetchLimit(PAGE_SIZE);\r\n    autoLoadAttemptsRef.current = 0;\r\n    setSelectedImages([]);\r\n    setLoadingProducts(true);\r\n    setModalOpen(true);\r\n    // Show cached instantly\r\n    try {\r\n      const cached = await loadCatalogSetProducts(setObj.id);\r\n      if (Array.isArray(cached) && cached.length) setProducts(cached);\r\n    } catch {}\r\n    await fetchProducts(setObj.id, PAGE_SIZE);\r\n  };\r\n\r\n  // Helpers: filter sets by prefix (case-insensitive)\r\n  const filterSetsByPrefix = (prefix) => {\r\n    const p = String(prefix || '').trim().toLowerCase();\r\n    return sets.filter(s => (s?.name || s?.id || '').toString().toLowerCase().startsWith(p));\r\n  };\r\n\r\n  // Open folder view modal for a filter (girls/boys/all)\r\n  const openFolderModal = async (filter) => {\r\n    setActiveFilter(filter);\r\n    const title = filter === 'girls' ? 'Girls' : filter === 'boys' ? 'Boys' : 'All Sets';\r\n    setModalTitle(title);\r\n    setModalMode('folders');\r\n    setSelectedImages([]);\r\n    setProducts([]);\r\n    setModalOpen(true);\r\n\r\n    const fsets = filter === 'all' ? sets.filter(s => s?.id) : filterSetsByPrefix(filter);\r\n    setFolderSets(fsets);\r\n\r\n    // Prefetch first few sets in the background for instant entry\r\n    try {\r\n      const top = fsets.slice(0, 4);\r\n      const concurrency = 2;\r\n      let i = 0;\r\n      const runNext = async () => {\r\n        if (i >= top.length) return;\r\n        const s = top[i++];\r\n        if (!s?.id) return runNext();\r\n        const cachedSet = await loadCatalogSetProducts(s.id);\r\n        if (!cachedSet || cachedSet.length === 0) {\r\n          try {\r\n            const resp = await api.get(`${API_BASE}/catalog-set-products`, { params: { set_id: s.id, limit: PAGE_SIZE } });\r\n            const arr = Array.isArray(resp.data) ? resp.data : [];\r\n            if (arr.length) await saveCatalogSetProducts(s.id, arr);\r\n          } catch {}\r\n        }\r\n        return runNext();\r\n      };\r\n      await Promise.all(Array.from({ length: concurrency }, () => runNext()));\r\n    } catch {}\r\n  };\r\n\r\n  const enterFolder = async (setObj) => {\r\n    await openSetModal(setObj);\r\n  };\r\n\r\n  return (\r\n    <div className=\"bg-gray-900 text-white border-t border-gray-800 p-2 w-full max-h-[110px] overflow-hidden rounded-b-xl shadow-sm flex-none\">\r\n      {/* Header */}\r\n      <div className=\"flex items-center justify-between mb-2\">\r\n        <h2 className=\"text-sm font-semibold text-gray-200\">Catalog</h2>\r\n        <div className=\"flex items-center gap-2\">\r\n          <RefreshCatalogButton onRefresh={() => { /* no-op; sets reloaded inside */ }} />\r\n          <div className={`w-2.5 h-2.5 rounded-full ${isWebSocketConnected ? 'bg-green-500' : 'bg-red-500'}`} title={isWebSocketConnected ? 'Connected' : 'Disconnected'} />\r\n          <div className=\"text-xs text-gray-400\">WS</div>\r\n        </div>\r\n      </div>\r\n\r\n      {sendingSet && (\r\n        <div className=\"flex items-center mb-2 text-xs text-gray-500\">\r\n          <span className=\"inline-block w-3 h-3 mr-1 border-2 border-gray-300 border-t-transparent rounded-full animate-spin\"></span>\r\n          Sending full set…\r\n        </div>\r\n      )}\r\n\r\n      {/* Filter buttons: Girls / Boys / All */}\r\n      <div className=\"catalog-sets grid grid-cols-3 gap-2 max-h-[84px]\">\r\n        {loadingSets ? (\r\n          <div className=\"text-xs text-gray-500 col-span-full\">Loading sets…</div>\r\n        ) : sets.length === 0 ? (\r\n          <div className=\"text-xs text-gray-400 col-span-full flex items-center gap-2\">\r\n            <span>No sets available.</span>\r\n            <button className=\"px-2 py-1 bg-gray-800 border border-gray-700 text-gray-200 rounded hover:bg-gray-700\" onClick={fetchSets} type=\"button\">Retry</button>\r\n          </div>\r\n        ) : (\r\n          <>\r\n            <button\r\n              className=\"px-3 py-2 text-sm rounded bg-gray-800 text-gray-200 hover:bg-gray-700 border border-gray-700\"\r\n              type=\"button\"\r\n              onClick={() => openFolderModal('girls')}\r\n            >\r\n              Girls\r\n            </button>\r\n            <button\r\n              className=\"px-3 py-2 text-sm rounded bg-gray-800 text-gray-200 hover:bg-gray-700 border border-gray-700\"\r\n              type=\"button\"\r\n              onClick={() => openFolderModal('boys')}\r\n            >\r\n              Boys\r\n            </button>\r\n            <button\r\n              className=\"px-3 py-2 text-sm rounded bg-gray-800 text-gray-200 hover:bg-gray-700 border border-gray-700\"\r\n              type=\"button\"\r\n              onClick={() => openFolderModal('all')}\r\n            >\r\n              All\r\n            </button>\r\n          </>\r\n        )}\r\n      </div>\r\n\r\n      {/* Modal popup with grid and actions */}\r\n      {modalOpen && createPortal(\r\n        <div className=\"fixed inset-0 z-[1000] bg-black/60 flex items-center justify-center\">\r\n          <div className=\"relative bg-white rounded-xl p-4 w-[96vw] max-w-6xl max-h-[90vh] flex flex-col shadow-2xl\">\r\n            {/* Modal header */}\r\n            <div className=\"flex items-center gap-3 mb-3\">\r\n              {modalMode === 'products' && (\r\n                <button className=\"px-3 py-2 text-sm rounded bg-gray-200 hover:bg-gray-300\" onClick={() => { setModalMode('folders'); setProducts([]); setSelectedImages([]); }}>\r\n                  ← Back\r\n                </button>\r\n              )}\r\n              <div className=\"font-semibold text-gray-800 text-base flex-1 truncate\">{modalTitle}</div>\r\n              {modalMode === 'products' ? (\r\n                <>\r\n                  <span className=\"text-sm text-gray-700 mr-2\">Selected: {selectedCount}</span>\r\n                  <button className=\"px-3 py-2 text-sm rounded bg-gray-200 hover:bg-gray-300\" onClick={selectAllVisible}>Select all</button>\r\n                  <button className=\"px-3 py-2 text-sm rounded bg-gray-200 hover:bg-gray-300\" onClick={clearSelection}>Clear</button>\r\n                  <button className=\"px-3 py-2 text-sm rounded bg-blue-600 text-white disabled:opacity-50\" disabled={!isWebSocketConnected || selectedCount === 0} onClick={() => { sendSelectedImages(); setModalOpen(false); }}>Send selected</button>\r\n                  <button className=\"px-3 py-2 text-sm rounded bg-green-600 text-white\" onClick={() => { sendWholeSet(); setModalOpen(false); }}>Send whole set</button>\r\n                </>\r\n              ) : (\r\n                <span className=\"text-sm text-gray-700\">Select a set</span>\r\n              )}\r\n              <button className=\"ml-2 px-3 py-2 text-sm rounded bg-red-600 text-white\" onClick={() => setModalOpen(false)}>Close</button>\r\n            </div>\r\n\r\n            {/* Grid (ensure scroll area) */}\r\n            <div ref={gridRef} className=\"flex-1 min-h-0 overflow-y-auto pr-1 h-[72vh]\">\r\n              {modalMode === 'folders' ? (\r\n                <div className=\"grid grid-cols-4 gap-3\">\r\n                  {folderSets.length === 0 ? (\r\n                    <div className=\"text-center text-gray-500 text-sm py-6 col-span-4\">No sets found.</div>\r\n                  ) : (\r\n                    folderSets.map((s) => (\r\n                      <button\r\n                        key={s.id}\r\n                        className=\"relative border rounded p-3 bg-gray-50 hover:bg-gray-100 text-left\"\r\n                        title={s.name || s.id}\r\n                        onClick={() => enterFolder(s)}\r\n                        type=\"button\"\r\n                      >\r\n                        <div className=\"w-10 h-7 mb-2 bg-yellow-300 rounded-sm\" />\r\n                        <div className=\"text-xs font-medium text-gray-800 truncate\">{s.name || s.id}</div>\r\n                      </button>\r\n                    ))\r\n                  )}\r\n                </div>\r\n              ) : (\r\n                <>\r\n                  {loadingProducts && products.length === 0 ? (\r\n                    <div className=\"grid grid-cols-4 gap-2\">\r\n                      {Array.from({ length: 12 }).map((_, i) => (\r\n                        <div key={i} className=\"h-24 bg-gray-100 animate-pulse rounded\" />\r\n                      ))}\r\n                    </div>\r\n                  ) : products.length === 0 ? (\r\n                    <div className=\"text-center text-gray-500 text-sm py-6\">No products in this set.</div>\r\n                  ) : (\r\n                    <div className=\"grid grid-cols-4 gap-3\">\r\n                      {products.map((p, idx) => {\r\n                        const url = p.images?.[0]?.url;\r\n                        const checked = url && selectedImages.includes(url);\r\n                        return (\r\n                          <div key={`${p.retailer_id}-${idx}`} className=\"relative group border rounded overflow-hidden\">\r\n                            {url && (\r\n                              <input type=\"checkbox\" className=\"absolute top-2 right-2 z-10 scale-150 cursor-pointer\" checked={checked} onChange={() => toggleSelect(url)} />\r\n                            )}\r\n                            <div className=\"w-full h-32 bg-gray-100 flex items-center justify-center\">\r\n                              {url ? (\r\n                                <img\r\n                                  src={url}\r\n                                  data-src={url}\r\n                                  alt={p.name}\r\n                                  className=\"w-full h-32 object-cover\"\r\n                                  loading=\"lazy\"\r\n                                  onError={(e) => {\r\n                                    const el = e.currentTarget;\r\n                                    if (el.dataset.fallback === '1') return;\r\n                                    el.dataset.fallback = '1';\r\n                                    const original = el.getAttribute('data-src') || el.src;\r\n                                    el.src = `${API_BASE}/proxy-image?url=${encodeURIComponent(original)}`;\r\n                                  }}\r\n                                />\r\n                              ) : (\r\n                                <span className=\"text-xs text-gray-400\">No Image</span>\r\n                              )}\r\n                            </div>\r\n                            {/* Quick action: send as catalog item (interactive product) */}\r\n                            <div className=\"p-2 flex items-center justify-between bg-white\">\r\n                              <div className=\"text-xs text-gray-700 truncate pr-2\" title={p.name}>{p.name}</div>\r\n                              <button\r\n                                type=\"button\"\r\n                                className=\"text-xs px-2 py-1 rounded bg-green-600 text-white hover:bg-green-700 disabled:opacity-50\"\r\n                                disabled={!isWebSocketConnected}\r\n                                onClick={() => { sendInteractiveProduct(p); setModalOpen(false); }}\r\n                                title=\"Send as catalog product\"\r\n                              >\r\n                                Send Product\r\n                              </button>\r\n                            </div>\r\n                          </div>\r\n                        );\r\n                      })}\r\n                    </div>\r\n                  )}\r\n                  {loadingProducts && products.length > 0 && (\r\n                    <div className=\"text-center text-gray-600 text-sm py-3\">Loading…</div>\r\n                  )}\r\n                  {!loadingProducts && hasMore && (\r\n                    <div className=\"flex justify-center py-3\">\r\n                      <button\r\n                        type=\"button\"\r\n                        className=\"px-4 py-2 text-sm rounded bg-gray-200 hover:bg-gray-300\"\r\n                        onClick={() => setFetchLimit((l) => l + PAGE_SIZE)}\r\n                        title=\"Load more items\"\r\n                      >\r\n                        Load more\r\n                      </button>\r\n                    </div>\r\n                  )}\r\n                </>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>,\r\n        document.body\r\n      )}\r\n    </div>\r\n  );\r\n}"],"names":["API_BASE","process","REACT_APP_API_BASE","CatalogPanel","_ref","activeUser","websocket","onMessageSent","sets","setSets","useState","loadingSets","setLoadingSets","selectedSet","setSelectedSet","PAGE_SIZE","products","setProducts","loadingProducts","setLoadingProducts","hasMore","setHasMore","fetchLimit","setFetchLimit","gridRef","useRef","abortRef","requestIdRef","selectedImages","setSelectedImages","pendingOperations","setPendingOperations","Set","modalOpen","setModalOpen","modalTitle","setModalTitle","modalMode","setModalMode","folderSets","setFolderSets","activeFilter","setActiveFilter","sendingSet","setSendingSet","autoLoadAttemptsRef","fetchSets","async","cached","loadCatalogSets","length","id","_unused","res","api","get","concat","list","Array","isArray","data","saveCatalogSets","top","slice","concurrency","i","runNext","s","cachedSet","loadCatalogSetProducts","resp","params","set_id","limit","arr","saveCatalogSetProducts","_unused2","Promise","all","from","_unused3","err","console","error","fetchProducts","setId","current","abort","controller","AbortController","reqId","signal","_unused4","name","useEffect","el","onScroll","scrollTop","clientHeight","scrollHeight","l","addEventListener","removeEventListener","sendOptimisticMessage","useCallback","messageData","readyState","WebSocket","OPEN","tempId","Date","now","Math","random","toString","substr","optimisticMessage","_objectSpread","user_id","from_me","status","timestamp","toISOString","temp_id","send","JSON","stringify","type","prev","sendImageUrl","url","caption","arguments","undefined","message","RefreshCatalogButton","_ref2","onRefresh","loading","setLoading","ok","setOk","_jsx","onClick","post","_unused5","setTimeout","disabled","className","title","children","FiRefreshCw","handleMessage","event","parse","has","newSet","delete","isWebSocketConnected","selectedCount","openFolderModal","filter","fsets","prefix","p","String","trim","toLowerCase","startsWith","filterSetsByPrefix","_unused7","_unused8","enterFolder","setObj","_unused6","openSetModal","_jsxs","_Fragment","createPortal","selectAllVisible","urls","map","_p$images","_p$images$","images","Boolean","clearSelection","r","alert","sendSelectedImages","setInfo","find","captionDetails","push","item_count","baseDetails","join","captionText","URLSearchParams","headers","sendWholeSet","ref","_","idx","_p$images2","_p$images2$","checked","includes","onChange","u","toggleSelect","src","alt","onError","e","currentTarget","dataset","fallback","original","getAttribute","encodeURIComponent","product","retailer_id","price","product_retailer_id","sendInteractiveProduct","document","body"],"sourceRoot":""}